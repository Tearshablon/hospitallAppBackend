/*
 * This file is generated by jOOQ.
*/
package org.jooq.generate.tables.records;


import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record2;
import org.jooq.Row2;
import org.jooq.generate.tables.Config;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.10.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class ConfigRecord extends UpdatableRecordImpl<ConfigRecord> implements Record2<String, String> {

    private static final long serialVersionUID = 2015090028;

    /**
     * Setter for <code>hospitallapp.config.property_name</code>.
     */
    public void setPropertyName(String value) {
        set(0, value);
    }

    /**
     * Getter for <code>hospitallapp.config.property_name</code>.
     */
    public String getPropertyName() {
        return (String) get(0);
    }

    /**
     * Setter for <code>hospitallapp.config.property_value</code>.
     */
    public void setPropertyValue(String value) {
        set(1, value);
    }

    /**
     * Getter for <code>hospitallapp.config.property_value</code>.
     */
    public String getPropertyValue() {
        return (String) get(1);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Record1<String> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record2 type implementation
    // -------------------------------------------------------------------------

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Row2<String, String> valuesRow() {
        return (Row2) super.valuesRow();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field1() {
        return Config.CONFIG.PROPERTY_NAME;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Field<String> field2() {
        return Config.CONFIG.PROPERTY_VALUE;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component1() {
        return getPropertyName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String component2() {
        return getPropertyValue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value1() {
        return getPropertyName();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public String value2() {
        return getPropertyValue();
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConfigRecord value1(String value) {
        setPropertyName(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConfigRecord value2(String value) {
        setPropertyValue(value);
        return this;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public ConfigRecord values(String value1, String value2) {
        value1(value1);
        value2(value2);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached ConfigRecord
     */
    public ConfigRecord() {
        super(Config.CONFIG);
    }

    /**
     * Create a detached, initialised ConfigRecord
     */
    public ConfigRecord(String propertyName, String propertyValue) {
        super(Config.CONFIG);

        set(0, propertyName);
        set(1, propertyValue);
    }
}
